# coding:UTF-8import stringimport reimport timeimport scheduleimport datetimeimport threadingimport pathlibimport xlwt# 定义编码格式import sysreload(sys)sys.setdefaultencoding("utf-8")# 引入tools模块的Tools类from tools import Toolsclass UpdateOnLine:    def __init__(self, basic_url, file_name):        self.basic_url = basic_url        self.file_name = file_name    def get_data_for_page(self, kind, page_num):        """        [ 获取table中的内容 ]        :param kind:        :param page_num:        :return:        """        if page_num == 1:            request_url = self.basic_url + "index.html"        else:            request_url = self.basic_url + "index_" + str(page_num - 1) + ".html"        table = Tools.get_page_content("get", request_url).find_all('table', attrs={'align': 'left'})  # 定位table元素        page = []        for trs in table:            if kind == 'th':                for e in trs.find_all(kind):                    page.append(e.get_text())            else:                line = []                for i, e in enumerate(trs.find_all(kind)):                    line.append(e.get_text())  # 将获取的字段保存入line[]中                    if string.find(e.get_text(), ":") != -1:                        page.append(line)  # 将获取的line[]保存入page[]中                        line = []  # 清空数据        return page    def get_table_head(self):        """        [ 获取 head ]        :return:        """        return self.get_data_for_page("th", 1)    def get_data_info(self, num):        """        [ 获取前x页的数据信息 ]        :param num:        :return:        """        table_info = []        for i in range(1, num + 1):            table_info.append(self.get_data_for_page("td", i))        return table_info    def show_table_head(self, table_head):        """        [ 显示 head ]        :param table_head:        :return:        """        for i in range(len(table_head)):            print(table_head[i]),        print("\n")    def show_table_info(self, table_info):        """        [ 显示数据信息 ]        :param table_info:        :return:        """        for page in range(len(table_info)):            for row in range(len(table_info[page])):                for col in range(len(table_info[page][row])):                    print(table_info[page][row][col]),                print("\n")            print("\n========================== 第" + str(page + 1) + "页 ==========================\n")    def get_update_row(self, table_info, excel_first_date, excel_first_time):        """        [ 获取更新的行号列表 ]        :param table_info:        :param excel_first_date:        :param excel_first_time:        :return:        """        update_row = []  # 一维list（存放需要更新的行号）        line_num = 0        for page in range(len(table_info)):            for row in range(len(table_info[page])):                line_num += 1  # 从下一行开始插入数据                for col in range(len(table_info[page][row])):                    text = table_info[page][row][col]                    if excel_first_date != "NULL":                        # 若当前'发布日期'>excel第一行的'发布日期'的，则保存行号                        if re.match(r'(.*)-(.*)-(.*)', text) and text > excel_first_date:                            update_row.append(line_num)                        # 若当前'发布时间'>excel第一行的'发布时间'的，并且之前一列的'发布日期'>=excel第一行的'发布时间'的，则保存行号                        elif re.match(r'(.*):(.*):(.*)', text) and text > excel_first_time:                            if table_info[page][row][col-1] >= excel_first_date:                                update_row.append(line_num)            line_num += 1  # 从下一行开始插入数据        print list(set(update_row))  # 将list去重        print "更新的行数：" + str(len(list(set(update_row))))        return update_row    def save_excel(self, table_head, table_info):        """        [ 将获取的数据存入excel中, 并返回更新的行号列表 ]        :param table_head:        :param table_info:        :return:        """        # 检查文件是否存在且是否为文件        if pathlib.Path(self.file_name).exists() & pathlib.Path(self.file_name).is_file():            # 获取第一张表的第一条信息的发布时间（ 第1张表，第2行，第7、8列 ）            excel_first_date = Tools.get_cell_data(self.file_name, 0, 1, 6)            excel_first_time = Tools.get_cell_data(self.file_name, 0, 1, 7)        else:            excel_first_date = "NULL"            excel_first_time = "NULL"        print("Excel第一行的日期：" + excel_first_date)        print("Excel第一行的时间：" + excel_first_time)        # 获取需要更新的行号列表        update_row = self.get_update_row(table_info, excel_first_date, excel_first_time)        # 将获取的数据存入excel中        workbook = xlwt.Workbook(encoding='utf-8')        sheet = workbook.add_sheet('中国银行', cell_overwrite_ok=True)        # 1.存入head数据        for index in range(len(table_head)):            sheet.write(0, index, table_head[index], Tools.set_style(u"华文新魏", True, 4, 250))        # 2.存入info数据        line_num = 0        for page in range(len(table_info)):            for row in range(len(table_info[page])):                line_num += 1  # 从下一行开始插入数据                for col in range(len(table_info[page][row])):                    text = table_info[page][row][col]                    if excel_first_date == "NULL":                        sheet.write(line_num, col, text)                    else:                        if line_num in list(set(update_row)):                            sheet.write(line_num, col, text, Tools.set_style(u"华文新魏", True, 33, 220))                        else:                            sheet.write(line_num, col, text)            line_num += 1  # 从下一行开始插入数据            sheet.write_merge(line_num, line_num, 0, 7, "========== 第 " + str(page + 1) + " 页 ==========",                              Tools.set_style(u"华文新魏", True, 46, 220))  # 合并单元格并写入内容        workbook.save(self.file_name)        return update_row    def job(self):        """        [ 任务 ]        :return:        """        # 获取head与前5页info数据，并显示        table_head = self.get_table_head()  # 一维list        table_info = self.get_data_info(5)  # 三维list [ [ [ 每一行 ], [ ] ], [ 每一页 ], 整体数据 ]        # show_table_head(table_head)        # show_table_info(table_info)        # 存入excel        update_row = self.save_excel(table_head, table_info)        # 当内容有更新时发送邮件 ( set() -> 去重 )        if len(list(set(update_row))) != 0:            Tools.send_mail('micllo@126.com', 'micllo', 'Python邮件发送练习', '邮件发送的内容', self.file_name)    def job_thread(self):        """        [ 线程执行任务 ]        :return:        """        print("开始执行任务：" + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))        threading.Thread(target=self.job).start()    def cron_task(self):        """        [ 定时任务 ]        :return:        """        schedule.every(10).seconds.do(self.job_thread)        # schedule.every(5).minutes.do(job_thread)        while True:            schedule.run_pending()            time.sleep(1)if __name__ == '__main__':    basicUrl = "http://www.boc.cn/sourcedb/whpj/"    proPath = "/Users/micllo/Documents/works/GitLab/python/exercises"    fileName = proPath + "测试.xls"    updateOnLine = UpdateOnLine(basicUrl, fileName)    updateOnLine.cron_task()